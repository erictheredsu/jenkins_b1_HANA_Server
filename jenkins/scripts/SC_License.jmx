<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.6" jmeter="2.11 r1554548">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="HDB_HOST" elementType="Argument">
            <stringProp name="Argument.name">HDB_HOST</stringProp>
            <stringProp name="Argument.value">${__P(HDB_HOST,10.58.114.66)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="HDB_INST" elementType="Argument">
            <stringProp name="Argument.name">HDB_INST</stringProp>
            <stringProp name="Argument.value">${__P(HDB_INST,95)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="HDB_USR" elementType="Argument">
            <stringProp name="Argument.name">HDB_USR</stringProp>
            <stringProp name="Argument.value">${__P(HDB_USR,SYSTEM)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="HDB_PWD" elementType="Argument">
            <stringProp name="Argument.name">HDB_PWD</stringProp>
            <stringProp name="Argument.value">${__P(HDB_PWD,manager)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SLD_HOST" elementType="Argument">
            <stringProp name="Argument.name">SLD_HOST</stringProp>
            <stringProp name="Argument.value">${__P(SLD_HOST,10.58.114.66)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SLD_PORT" elementType="Argument">
            <stringProp name="Argument.name">SLD_PORT</stringProp>
            <stringProp name="Argument.value">${__P(SLD_PORT,40095)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SCHEMA" elementType="Argument">
            <stringProp name="Argument.name">SCHEMA</stringProp>
            <stringProp name="Argument.value">${__P(SCHEMA,SBOTESTUS)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="B1_USR" elementType="Argument">
            <stringProp name="Argument.name">B1_USR</stringProp>
            <stringProp name="Argument.value">${__P(B1_USR,manager)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="B1_PWD" elementType="Argument">
            <stringProp name="Argument.name">B1_PWD</stringProp>
            <stringProp name="Argument.value">${__P(B1_PWD,manager)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SITE_USR" elementType="Argument">
            <stringProp name="Argument.name">SITE_USR</stringProp>
            <stringProp name="Argument.value">${__P(SITE_USR,B1SiteUser)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SITE_PWD" elementType="Argument">
            <stringProp name="Argument.name">SITE_PWD</stringProp>
            <stringProp name="Argument.value">${__P(SITE_PWD,1234)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LIC_FILE" elementType="Argument">
            <stringProp name="Argument.name">LIC_FILE</stringProp>
            <stringProp name="Argument.value">${__P(LIC_FILE,c:\d\tmp\B1GuiServer_lic.txt)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="B1AH_HOST" elementType="Argument">
            <stringProp name="Argument.name">B1AH_HOST</stringProp>
            <stringProp name="Argument.value">${__P(B1AH_HOST,10.58.114.66)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="B1AH_PORT" elementType="Argument">
            <stringProp name="Argument.name">B1AH_PORT</stringProp>
            <stringProp name="Argument.value">${__P(B1AH_PORT,40095)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="HR_FILE" elementType="Argument">
            <stringProp name="Argument.name">HR_FILE</stringProp>
            <stringProp name="Argument.value">${__P(HR_FILE,c:\d\tmp\hr)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1428722369000</longProp>
        <longProp name="ThreadGroup.end_time">1428722369000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        </CookieManager>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>true</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>true</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>true</responseHeaders>
              <requestHeaders>true</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <url>true</url>
              <fileName>true</fileName>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <stringProp name="filename">SC_License.jtl</stringProp>
        </ResultCollector>
        <hashTree/>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
        <hashTree>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${SLD_HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${SLD_PORT}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/license/</stringProp>
            <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
          </ConfigTestElement>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="_Import" enabled="true">
            <stringProp name="IncludeController.includepath">TC_License_ImportLicenseFile.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="_Allocate" enabled="true">
            <stringProp name="IncludeController.includepath">TC_License_AllocateLicense.jmx</stringProp>
          </IncludeController>
          <hashTree/>
        </hashTree>
        <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Mark Result" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">// Generate an empty file to makr the current run successfully!
FileWriter fstream = new FileWriter(vars.get(&quot;HR_FILE&quot;), true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(&quot;&quot;);
out.close();</stringProp>
          <stringProp name="scriptLanguage">beanshell</stringProp>
        </BSFSampler>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
